#!/usr/bin/env bash
set -euo pipefail
cd "${REPO:-$HOME/Downloads/new-release-wall}"

echo "▶ S1: Snapshot"
SNAP_DIR="$(./nrw-make-code-snapshot.sh || true)"
test -n "${SNAP_DIR:-}" || { echo "Snapshot step didn't return a path"; exit 2; }

ZIP="${SNAP_DIR}.zip"
MAN="${SNAP_DIR}.manifest.txt"
test -f "$ZIP" && test -f "$MAN" || { echo "Snapshot artifacts missing"; exit 2; }

echo "▶ S2: Audit"
if ./nrw-audit.sh; then
  STATUS="PASS"
else
  STATUS="FAIL"
fi

echo "▶ S3: Diff (light)"
LAST="$(ls -1t snapshots/CODE_SNAP_*.manifest.txt 2>/dev/null | sed -n '2p' || true)"
if [[ -n "$LAST" ]]; then
  echo "— changed files since previous snapshot:"
  comm -3 <(cut -c 23- "$LAST" | sort) <(cut -c 23- "$MAN" | sort) | sed 's/^/  /' || true
else
  echo "— first snapshot this session (no previous manifest)"
fi

echo
echo "==== POST-VALIDATION ${STATUS} ===="
if [[ "$STATUS" == "PASS" ]]; then
  ls -lh "$ZIP" "$MAN"
  echo "UPLOAD THESE:"
  echo "  $ZIP"
  echo "  $MAN"
  exit 0
else
  echo "Fix the reported issue(s) above, reapply patch if needed, then rerun: ./nrw-post-validate.sh"
  exit 1
fi
# === Charter & bundle validation (AMENDMENT-021) ===
set -euo pipefail
cd "${REPO:-$PWD}"

fail(){ echo "FAIL: $*"; exit 1; }

# Required outputs
[ -f output/data.json ] || fail "missing output/data.json"
[ -f output/site/index.html ] || fail "missing output/site/index.html"
[ -f PROJECT_LOG.md ] || fail "missing PROJECT_LOG.md"
[ -f complete_project_context.md ] || fail "missing complete_project_context.md"

# Charter checks
MIN_AMEND=${CHARTER_MIN_AMENDMENTS:-20}
A_COUNT=$(grep -c '^### AMENDMENT-' PROJECT_CHARTER.md || true)
[ "${A_COUNT:-0}" -ge "$MIN_AMEND" ] || fail "charter has ${A_COUNT:-0} amendments (< $MIN_AMEND)"

# Timestamped charter presence and hash parity
STAMPED=$(ls -1t PROJECT_CHARTER_*.md 2>/dev/null | head -1 || true)
[ -n "${STAMPED:-}" ] || fail "no timestamped charter in repo root (expected created during packaging)"
SHA_REPO=$(shasum -a 256 PROJECT_CHARTER.md | awk '{print $1}')
SHA_STAMP=$(shasum -a 256 "$STAMPED" | awk '{print $1}')
[ "$SHA_REPO" = "$SHA_STAMP" ] || fail "repo charter vs timestamped charter hash mismatch"

# Charter history copy
[ -f "charter_history/$(basename "$STAMPED")" ] || fail "missing charter_history copy"

echo "POSTVALIDATION: OK"
