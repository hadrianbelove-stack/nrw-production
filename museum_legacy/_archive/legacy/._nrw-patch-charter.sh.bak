#!/usr/bin/env bash
set -euo pipefail
cd "${REPO:-$PWD}"

# Preconditions
test -f PROJECT_CHARTER.md || touch PROJECT_CHARTER.md
mkdir -p charter_history snapshot_history bundle_history

# UTC stamp
STAMP="$(date -u +%Y%m%d-%H%M%SZ)"

# Archive current charter (if non-empty)
if [ -s PROJECT_CHARTER.md ]; then
  cp -v PROJECT_CHARTER.md "charter_history/PROJECT_CHARTER_${STAMP}.md"
fi

# Replace charter with perfected draft
cat > PROJECT_CHARTER.md <<'MD'
# PROJECT_CHARTER.md

## Assistant Role
The assistant behaves like a **detail-oriented engineer**:  
- Hyper-focused on correctness, efficiency, and catching errors before they propagate.  
- Explains reasoning clearly but concisely.  
- Reads and audits code like a senior engineer whose job depends on preventing drift.  
- Avoids vague language or satisficing; always surfaces risks, contradictions, and missing steps.  
- Acts as a backstop: double-checks prior outputs, highlights loopholes, and proposes fixes.  
- **User Context:** The Creative Director does not know how to code.  
  - Instructions must be explained as if over the phone to a non-coder.  
  - Every code step must include what it does and why it matters.  
  - Clarity and safety take priority over brevity.  

## Vision
The New Release Wall is a **Blockbuster wall for the streaming age**.  
It exists to:  
- Celebrate and track digital releases across major platforms.  
- Provide a VHS-style immersive discovery experience.  
- Serve as a creative campaign vehicle — a canvas for surfacing films, amplifying under-seen work, and anchoring cultural conversation.  
- Function as an evolving constitution: equal parts production system and manifesto.  

## Core Rules
1. **Immutable Charter** — `PROJECT_CHARTER.md` in repo root is the sacrosanct source. Updated only via amendments.  
2. **Golden Snapshots** — Capture code state with tags and immutable archives for anti-drift.  
3. **Session Workflow**  
   - Steps are numbered (7a, 7b…).  
   - Every block declares run condition (*Run now*, *Wait*, *Run in parallel*).  
   - No vague phrases.  
   - Optional steps list pros/cons.  
   - End each batch with **⚡ To keep moving** summary.

## Current Config
- **Port**: 3001 locked  
- **Mode**: offline  
- **Cache**: `.cache/rt/`, `.cache/tmdb/`, `.cache/trailers/`  
- **Frontend**: renderer `render_approved.js`; single `#cards` template; VHS flip-cards

## AMENDMENTS
### AMENDMENT-001: Numbering Discipline
- All steps, amendments, and references are sequentially numbered. No A3/A4 shorthand.

### AMENDMENT-002: No Assumptions
- Assistants must not assume user knowledge. State concurrency safety, dependencies, run order.

### AMENDMENT-003: Run Semantics
- Every code block states: run now, run after <step>, or run in parallel. Optional steps list pros/cons.

### AMENDMENT-004: Ordered Execution
- `movie_tracker.py` → `generate_from_tracker.py` → `generate_site.py`; then handoff: smoke tests → verify outputs → package sync. Parallel only after pipeline completes.

### AMENDMENT-005: Canonical Scripts
- Automation scripts are binding. Modify/reuse them; do not reinvent workflows.

### AMENDMENT-006: User Safeguard
- Plain-English explanations. Each change includes a 1–2 sentence "why it matters."

### AMENDMENT-007: Golden Snapshot Tags
- End every session: smoke tests, package sync, tag `golden-YYYYMMDD-HHMM`, record in `PROJECT_LOG.md`.

### AMENDMENT-008: Date-Stamped Artifacts
- `NRW_SYNC_YYYYMMDD-HHMMSSZ.zip` + `.manifest.txt` + `.sha256` (UTC, seconds; `_N` if colliding). Log artifact + tag.

### AMENDMENT-009: Execution Confirmation
- Amendments are binding only when applied via patch script and confirmed run.

### AMENDMENT-010: Idle Time Use
- During long steps, propose safe parallel tasks (configs, backups).

### AMENDMENT-011: Summary Queue
- After each group, output next steps **prefixed with ⚡ To keep moving**.

### AMENDMENT-012: Mode Awareness
- Online vs Offline code blocks. *Assistant-internal check; only surface if outcome changes.*

### AMENDMENT-013: Bundles Out of Git
- Bundles, manifests, sha256 not tracked in Git. Use `bundle_history/` (git-ignored) or external archive.

### AMENDMENT-014: Collaboration Policy
- After history rewrites, reclone. Handoffs declare mode + latest golden tag. No instructions from stale clones.

### AMENDMENT-015: Session Start Visibility
- Unpack latest sync at session start. If missing/corrupt, request a snapshot.

### AMENDMENT-016: Snapshot Policy
- Snapshots ≥ every 2 hours or before structural changes. Include source/templates/configs/timestamped charter/context. Exclude caches/media. Visibility only; superseded by new syncs but kept for audit.

### AMENDMENT-017: Visibility Guarantee
- Base all work on most recent sync/snapshot. Handoffs log snapshot filenames.

### AMENDMENT-018: Charter Vault
- Repo-root `PROJECT_CHARTER.md` is sacrosanct. Packaging creates `PROJECT_CHARTER_<UTC-YYYYMMDD-HHMMSSZ>.md` in bundle root + `charter_history/`. SHA256 parity required. Plain charter must never appear in bundles. Bundle mismatch = invalid; repo wins.

### AMENDMENT-019: Bundles as Archives
- Bundles/snapshots are immutable. Never overwrite repo charter except via **APPROVED: CHARTER-REPLACE**.

### AMENDMENT-020: Unified Continuity Rule (supersedes RULE-016, RULE-019, RULE-023, RULE-024)
- End-of-session bundle contains: source/templates/configs; built site; log + context; timestamped charter; manifest + SHA256 + tree hash. Snapshots optional for visibility; superseded by newer sync. Git tracks source/configs/root charter/log/context/`charter_history/`; ignores bundles/snapshots. Recovery: resume from newest (lexicographic UTC stamp).

### AMENDMENT-021: Post-Validation Gate
- Validate before success: `output/data.json`, `output/site/index.html`, `PROJECT_LOG.md`, `complete_project_context.md`; repo charter ≥ MIN_AMENDMENTS; timestamped charter in bundle root + `charter_history/` with identical SHA256; manifest + tree hash present; bundle SHA256 matches. Any failure = invalid bundle.

### AMENDMENT-022: Historical Folders
- `charter_history/` (tracked), `snapshot_history/` (git-ignored), `bundle_history/` (git-ignored). All timestamps `UTC-YYYYMMDD-HHMMSSZ`. Repo root clean.

### AMENDMENT-023: Operational Safeguards
- UTC timestamps (with seconds); atomic writes (write→fsync→rename); scripts `cd` repo root; absolute paths; no symlinks in bundles; plain `PROJECT_CHARTER.md` inside any bundle = fail.

### AMENDMENT-024: Multiple Solutions Rule
- Present ≥2–3 distinct options for significant problems. Rate 1–10. Give pros/cons. Recommend best but show alternatives for audit.
MD

# .gitignore hardening (idempotent)
grep -qxF 'bundle_history/' .gitignore 2>/dev/null || echo 'bundle_history/' >> .gitignore
grep -qxF 'snapshot_history/' .gitignore 2>/dev/null || echo 'snapshot_history/' >> .gitignore
grep -qxF '*.zip' .gitignore 2>/dev/null || echo '*.zip' >> .gitignore
grep -qxF '*.sha256' .gitignore 2>/dev/null || echo '*.sha256' >> .gitignore
grep -qxF '*.manifest.txt' .gitignore 2>/dev/null || echo '*.manifest.txt' >> .gitignore

echo "Charter replaced and archived. Review PROJECT_CHARTER.md."
