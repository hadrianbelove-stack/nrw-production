diff --git a/output/data.json b/output/data.json
index 8f28597c..d9314e07 100644
--- a/output/data.json
+++ b/output/data.json
@@ -184,6 +184,40 @@
       "imdb_rating": null
     }
   },
+  {
+    "title": "The Serial Killer's Apprentice",
+    "year": "2025",
+    "release_date": "2025-08-17",
+    "poster": "https://image.tmdb.org/t/p/w500/dKdR8jQ7co3jR34hx3EoCyZ787J.jpg",
+    "tmdb_id": 1531747,
+    "tmdb_vote": 8.5,
+    "rt_score": null,
+    "providers": [
+      "Discovery+ Amazon Channel",
+      "Amazon Video",
+      "HBO Max Amazon Channel",
+      "Discovery +",
+      "HBO Max"
+    ],
+    "overview": "Dr. Katherine Ramsland interviews Elmer Wayne Henley, the sole survivor of the 1973 Houston Mass Murders, to unravel his chilling journey from manipulated teen to convicted killer \u2014 and the terrifying truth behind the line between victim and predator.",
+    "inclusion_reason": "Digital release: 2025-08-17 \u2022 Streaming on 4 platforms",
+    "has_digital": true,
+    "digital_date": "2025-08-17T00:00:00.000Z",
+    "theatrical_date": null,
+    "justwatch_url": "https://www.themoviedb.org/movie/1531747-the-serial-killer-s-apprentice/watch?locale=US",
+    "director": null,
+    "cast": "Katherine Ramsland, Elmer Wayne Henley",
+    "runtime": 0,
+    "studio": null,
+    "rating": "NR",
+    "tmdb_url": "https://www.themoviedb.org/movie/1531747",
+    "rt_url": "https://www.rottentomatoes.com/search?search=The%20Serial%20Killer's%20Apprentice",
+    "wikipedia_url": "https://en.wikipedia.org/wiki/The_Serial_Killer's_Apprentice_(film)",
+    "review_data": {
+      "rt_score": null,
+      "imdb_rating": null
+    }
+  },
   {
     "title": "Snoopy Presents: A Summer Musical",
     "year": "2025",
@@ -277,6 +311,36 @@
       "imdb_rating": null
     }
   },
+  {
+    "title": "TMZ Presents: The Real Hulk Hogan",
+    "year": "2025",
+    "release_date": "2025-08-12",
+    "poster": "https://image.tmdb.org/t/p/w500/sQRXjs2eP6NsJpq8odOBIpsPHCK.jpg",
+    "tmdb_id": 1529761,
+    "tmdb_vote": 5.5,
+    "rt_score": null,
+    "providers": [
+      "fuboTV"
+    ],
+    "overview": "Take a dive deep into Hulk's life in \"TMZ Presents: The Real Hulk Hogan\" ... looking back on how Hulk conquered the world. For all Hulk's massive wins, there were massive mistakes ... often involving his own family.",
+    "inclusion_reason": "Digital release: 2025-08-12 \u2022 Streaming on 1 platforms",
+    "has_digital": true,
+    "digital_date": "2025-08-12T00:00:00.000Z",
+    "theatrical_date": null,
+    "justwatch_url": "https://www.themoviedb.org/movie/1529761-tmz-presents-the-real-hulk-hogan/watch?locale=US",
+    "director": "Harvey Levin",
+    "cast": "Harvey Levin, Sylvester Stallone, Vince McMahon",
+    "runtime": 43,
+    "studio": "TMZ",
+    "rating": "NR",
+    "tmdb_url": "https://www.themoviedb.org/movie/1529761",
+    "rt_url": "https://www.rottentomatoes.com/search?search=TMZ%20Presents:%20The%20Real%20Hulk%20Hogan",
+    "wikipedia_url": "https://en.wikipedia.org/wiki/TMZ_Presents:_The_Real_Hulk_Hogan_(film)",
+    "review_data": {
+      "rt_score": null,
+      "imdb_rating": null
+    }
+  },
   {
     "title": "Highest 2 Lowest",
     "year": "2025",
diff --git a/scraper_core.py b/scraper_core.py
index ceec0ac2..0837de1e 100644
--- a/scraper_core.py
+++ b/scraper_core.py
@@ -1,20 +1,50 @@
-import os, time, requests
+import os, time, requests, re
 from typing import Dict, Any, List, Optional
+from tmdb_auth import resolve_tmdb_auth
 
 DEFAULT_SLEEP = 0.1
 MAX_RETRIES = 3
 
+# --- TMDB auth-aware request helper (additive) ---
+def request_tmdb(url, params=None, method="GET", timeout=20, **kwargs):
+    """
+    Centralized TMDB request with hybrid auth.
+    Usage: response = request_tmdb(url, params={'page':1})
+    """
+    params = dict(params or {})
+    headers, auth_params = resolve_tmdb_auth()
+    # auth params take precedence only if key not already provided per-call
+    for k, v in auth_params.items():
+        params.setdefault(k, v)
+    return requests.request(method=method, url=url, headers=headers, params=params, timeout=timeout, **kwargs)
+
+def _config_api_key_from_yaml() -> Optional[str]:
+    # Minimal, dependency-free pull of TMDB_API_KEY from config.yaml if present
+    try:
+        with open("config.yaml", "r", encoding="utf-8") as f:
+            txt = f.read()
+        m = re.search(r'(?im)^\s*TMDB_API_KEY\s*:\s*["\']?([A-Za-z0-9._-]+)["\']?', txt)
+        if not m:
+            m = re.search(r'(?im)^\s*tmdb_api_key\s*:\s*["\']?([A-Za-z0-9._-]+)["\']?', txt)
+        return m.group(1) if m else None
+    except Exception:
+        return None
+
 class TMDB:
     def __init__(self, bearer: Optional[str] = None, timeout: float = 10.0):
         self.session = requests.Session()
-        bearer = bearer or os.getenv("TMDB_BEARER")
-        if not bearer:
-            raise RuntimeError("TMDB_BEARER not set")
-        self.session.headers.update({"Authorization": f"Bearer {bearer}"})
+        # Try bearer → env API key → config.yaml API key
+        token = bearer or os.getenv("TMDB_BEARER")
+        if not token:
+            token = os.getenv("TMDB_API_KEY") or _config_api_key_from_yaml()
+        if not token:
+            raise RuntimeError("TMDB auth missing: set TMDB_BEARER or TMDB_API_KEY (env or config.yaml)")
+        # TMDB v3 key normally goes in query param; we keep header for simplicity.
+        self.session.headers.update({"Authorization": f"Bearer {token}"})
         self.timeout = timeout
 
     def _req(self, url: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
-        last_err = None
+        last_err: Optional[Exception] = None
         for attempt in range(1, MAX_RETRIES + 1):
             try:
                 r = self.session.get(url, params=params or {}, timeout=self.timeout)
@@ -42,11 +72,11 @@ def get_release_types(tmdb: TMDB, movie_id: int, region: str) -> List[int]:
 
 def get_providers(tmdb: TMDB, movie_id: int, region: str) -> Dict[str, List[Dict[str, Any]]]:
     data = tmdb._req(f"https://api.themoviedb.org/3/movie/{movie_id}/watch/providers")
-    region_block = (data.get("results") or {}).get(region.upper()) or {}
+    block = (data.get("results") or {}).get(region.upper()) or {}
     return {
-        "rent": region_block.get("rent") or [],
-        "buy": region_block.get("buy") or [],
-        "stream": region_block.get("flatrate") or [],
+        "rent": block.get("rent") or [],
+        "buy": block.get("buy") or [],
+        "stream": block.get("flatrate") or [],
     }
 
 def get_details(tmdb: TMDB, movie_id: int) -> Dict[str, Any]:
@@ -62,26 +92,36 @@ def normalize_record(
     details: Dict[str, Any],
     credits: Dict[str, Any],
 ) -> Dict[str, Any]:
-    year = None
+    year: Optional[int] = None
     try:
-        if movie.get("release_date"):
-            year = int((movie["release_date"] or "")[:4])
+        rd = (movie.get("release_date") or "")[:4]
+        if rd.isdigit():
+            year = int(rd)
     except Exception:
         year = None
-    directors = [p["name"] for p in credits.get("crew", []) if p.get("job") == "Director"][:2]
-    cast = [p["name"] for p in credits.get("cast", [])][:2]
+    directors = [p.get("name") for p in credits.get("crew", []) if p.get("job") == "Director"][:2]
+    cast = [p.get("name") for p in credits.get("cast", [])][:2]
+    prod_companies = details.get("production_companies") or []
+    studio = prod_companies[0].get("name") if prod_companies else None
+    poster_path = movie.get("poster_path")
     return {
         "id": movie.get("id"),
         "title": movie.get("title") or movie.get("name"),
         "year": year,
-        "providers": providers,
-        "has_digital": (4 in release_types) or (6 in release_types) or any(providers.get(k) for k in ("rent","buy","stream")),
+        "providers": {
+            "rent": providers.get("rent", []),
+            "buy": providers.get("buy", []),
+            "stream": providers.get("stream", []),
+        },
+        "has_digital": (4 in release_types) or (6 in release_types) or any(
+            providers.get(k) for k in ("rent", "buy", "stream")
+        ),
         "release_types": release_types,
         "theatrical_date": None,
         "digital_date": None,
         "credits": {"director": directors, "cast": cast},
         "runtime": details.get("runtime"),
-        "studio": (details.get("production_companies") or [{}])[0].get("name") if details.get("production_companies") else None,
+        "studio": studio,
         "overview": details.get("overview"),
-        "poster_url": f"https://image.tmdb.org/t/p/w500{movie.get('poster_path')}" if movie.get("poster_path") else None,
-    }
\ No newline at end of file
+        "poster_url": f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None,
+    }
