name: "Daily NRW Update"

on:
  schedule:
    - cron: '0 9 * * *'  # 9 AM UTC daily
  workflow_dispatch:  # Manual trigger for testing

concurrency:
  group: nrw-automation
  cancel-in-progress: true

permissions:
  contents: write
  issues: write

jobs:
  daily-update:
    runs-on: ubuntu-latest
    env:
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      WATCHMODE_API_KEY: ${{ secrets.WATCHMODE_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium
          sudo python -m playwright install-deps

      - name: Configure Git
        run: |
          git config user.name "NRW Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run daily pipeline
        run: python3 daily_orchestrator.py

      - name: Check for changes
        id: changes
        run: |
          git diff --quiet -- data.json || echo "changes=true" >> $GITHUB_OUTPUT
          if [[ "$(git status --porcelain -- data.json)" ]]; then
            echo "Changes detected in repository"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Commit changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git add data.json
          git commit -m "Daily update - $(date +%Y-%m-%d) [automated]"

      - name: Switch to automation branch
        if: steps.changes.outputs.changes == 'true'
        run: git checkout -B automation-updates

      - name: Force push to remote
        if: steps.changes.outputs.changes == 'true'
        run: git push --force origin automation-updates

      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v7
        env:
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Daily Automation Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Daily Automation Failure

            **Workflow Run:** ${process.env.WORKFLOW_URL}
            **Failure Time:** ${new Date().toISOString()}
            **Branch:** ${context.ref}

            ### Debugging Steps:
            1. Check the workflow logs at the URL above
            2. Review \`daily_orchestrator.py\` output for specific errors
            3. Verify API keys are properly configured in repository secrets
            4. Check data quality validation errors

            ### Manual Recovery:
            If needed, run the daily pipeline manually:
            \`\`\`bash
            python3 daily_orchestrator.py
            \`\`\`

            This issue was created automatically by the failed workflow.`,
              labels: ['automation', 'bug']
            })
